# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades./n"),
p("Your grade is highlighted in plum color with scores in blue text overlaid.
The gray dots are distributions of the grades as a class.
The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023"))
)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades./n"),
p("Your grade is highlighted in plum color with scores in blue text overlaid.
The gray dots are distributions of the grades as a class.
The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023"))
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades./n"),
p("Your grade is highlighted in plum color with scores in blue text overlaid.
The gray dots are distributions of the grades as a class.
The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades./n"),
p("Your grade is highlighted in plum color with scores in blue text overlaid.
The gray dots are distributions of the grades as a class.
The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
p(""),
p("Your grade is highlighted in plum color with scores in blue text overlaid.
The gray dots are distributions of the grades as a class.
The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
p(""),
p("Your grade is highlighted in plum color with scores in blue text overlaid./n
The gray dots are distributions of the grades as a class./n
The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in plum color with scores in blue text overlaid.",
br(),
"The gray dots are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
color('plum2')
colors('plum2')
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in", span("plum color",style='color:plum2'),
"with scores in", span("blue text",style='color:navy'), "overlaid.",
br(),
"The", span("gray dots",style='color:gray'), "are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
br(),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in", span("purple",style='color:pink'),
"with scores in", span("blue text",style='color:blue'), "overlaid.",
br(),
"The", span("gray",style='color:gray'), "dots are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
br(),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in", span("purple",style='color:lavendar'),
"with scores in", span("blue text",style='color:blue'), "overlaid.",
br(),
"The", span("gray",style='color:gray'), "dots are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
br(),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in", span("purple",style='color:purple'),
"with scores in", span("blue text",style='color:blue'), "overlaid.",
br(),
"The", span("gray",style='color:gray'), "dots are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
br(),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in", span("purple",style='color:magenta'),
"dots with scores in", span("blue text",style='color:blue'), "overlaid.",
br(),
"The", span("gray",style='color:gray'), "dots are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
br(),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Intro tab: how to use the app ----
intro_tab <- tabPanel(
title="Instructions", # tab name
# Page title
titlePanel("How to use this app"),
#img(src = "[img source]"),
br(),
p("Enter your student key to access your grades."),
br(),
p("Your grade is highlighted in", span("purple",style='color:magenta'),
"dots with scores in", span("blue text",style='color:blue'), "overlaid.",
br(),
"The", span("gray",style='color:gray'), "dots are distributions of the grades as a class.", br(),
"The star indicates the required # of times towards mastery of a skill."),
br(),
p(a(href = "[https://sites.google.com/ucsd.edu/yaqianhuang/home]",
"Designed by © Yaqian Huang 2/17/2023")))
# Define UI for app ####
# ui <- fluidPage(
#   intro_tab,
#   second_tab,
#   third_tab
# )
ui <- navbarPage(
"Skill-based grading",
intro_tab,
second_tab,
third_tab
)
#### always last
shinyApp(ui = ui, server = server)
# Second tab: check own performance ####
# Sidebar panel for inputs
sidebar_content <- sidebarPanel(
textInput(inputId = "id", label = h3("Student key"), value = "Enter your key..."),
# Input: dropdown for the kinds of skills
selectInput(inputId = "skills", # to match server output color
label = "Select a skill",
# Create the choices that can be selected. e.g. Display "A" and link to value "a"
choices = c("1.1 DefineSymbol"="1.1.",
"1.2 GiveSymbol"="1.2.",
"2.1 TranscribeMulti"="2.1.",
"2.2 TranscribeC"="2.2.",
"2.3 TranscribeV"="2.3.",
"2.4 TranscribeTone"="2.4.",
"2.5 TranscribeKnown"="2.5.",
"3.1 ReadVocalTract"="3.1.",
"3.2 GesturalScore"="3.2.",
"4.1 SegmentSpectro"="4.1.",
"4.2 ReadSpectro"="4.2.",
"4.3 IdentifyDisplay"="4.3.",
"4.4 ReadFrequency"="4.4.",
"4.5 HarmonicsFormants"="4.5.",
"5 Apply"="5."),
selected = "", # from the set of choice values
)
# hr(),
# fluidRow(column(3, verbatimTextOutput("value")))
)
server <- function(input, output) {
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
# filter selected skill
# filter student id/key/text
# y = cumulative skill score (easier thru excel);
# otherwise: sum scores of a particular col containing # skill (e.g.,1.1)
# scatter plot or average
# color match studentID or doesn't need color
# highlight ind student; others gray; maximum black
# ggplot(aes(x= , y= , color=.data[[input$skills]], ))+geom_bar()/geom_line
plotstyle = list(
theme_light(base_size=32),
theme(panel.border = element_rect(color = 'black',fill=NA),
axis.title.y = element_blank(),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size=20))
)
ggplot(df, aes(y = skill,x=num)) +
#geom_segment(aes(x=as.numeric(highlight),y=0,xend=as.numeric(highlight)+2,yend=0)) +
geom_point(#data = df%>%filter(`key` == input$id),
fill = "slateblue",
#data = df%>%filter(skillnum%in%input$skills),
colour = "slateblue",size=6,shape=8,
aes(y=skill,x=highlight))+
geom_point(fill = "grey",
data = df%>%filter(skillnum%in%input$skills),
colour = "grey",size=3)+
geom_point(fill = "plum2",
data = df%>%filter(`key` == input$id),
colour = "plum2",size=8)+
geom_text(data = df%>%filter(`key` == input$id,skillnum%in%input$skills),
aes(label=num),size=6,color='navy',fontface='bold')+
# geom_label(data = df%>%filter(`key` == input$id),
#            fill = "cyan",
#            #data = df%>%filter(skillnum%in%input$skills),
#            colour = "cyan",size=5,#shape=8,
#            aes(label=highlight))+
#,vjust = 2+0.1*as.numeric(num))+
labs(x='# Times demonstrated')+plotstyle
})
output$appendix <- renderTable(list(skills = c("1.1 DefineSymbol","1.2 GiveSymbol",
"2.1 TranscribeMulti",
"2.2 TranscribeC",
"2.3 TranscribeV",
"2.4 TranscribeTone",
"2.5 TranscribeKnown",
"3.1 ReadVocalTract",
"3.2 GesturalScore",
"4.1 SegmentSpectro",
"4.2 ReadSpectro",
"4.3 IdentifyDisplay",
"4.4 ReadFrequency",
"4.5 HarmonicsFormants",
"5 Apply"),
`#Time to mastery` = c("15","10","25","10","5","5","30","5","5","7","7","2","2",
"2","5"))
)
#output$value <- renderPrint({ input$text })
}
#### always last
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
# filter selected skill
# filter student id/key/text
# y = cumulative skill score (easier thru excel);
# otherwise: sum scores of a particular col containing # skill (e.g.,1.1)
# scatter plot or average
# color match studentID or doesn't need color
# highlight ind student; others gray; maximum black
# ggplot(aes(x= , y= , color=.data[[input$skills]], ))+geom_bar()/geom_line
plotstyle = list(
theme_light(base_size=24),
theme(panel.border = element_rect(color = 'black',fill=NA),
axis.title.y = element_blank(),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size=24))
)
ggplot(df, aes(y = skill,x=num)) +
#geom_segment(aes(x=as.numeric(highlight),y=0,xend=as.numeric(highlight)+2,yend=0)) +
geom_point(#data = df%>%filter(`key` == input$id),
fill = "slateblue",
#data = df%>%filter(skillnum%in%input$skills),
colour = "slateblue",size=6,shape=8,
aes(y=skill,x=highlight))+
geom_point(fill = "grey",
data = df%>%filter(skillnum%in%input$skills),
colour = "grey",size=3)+
geom_point(fill = "plum2",
data = df%>%filter(`key` == input$id),
colour = "plum2",size=8)+
geom_text(data = df%>%filter(`key` == input$id,skillnum%in%input$skills),
aes(label=num),size=6,color='navy',fontface='bold')+
# geom_label(data = df%>%filter(`key` == input$id),
#            fill = "cyan",
#            #data = df%>%filter(skillnum%in%input$skills),
#            colour = "cyan",size=5,#shape=8,
#            aes(label=highlight))+
#,vjust = 2+0.1*as.numeric(num))+
labs(x='# Times demonstrated')+plotstyle
})
output$appendix <- renderTable(list(skills = c("1.1 DefineSymbol","1.2 GiveSymbol",
"2.1 TranscribeMulti",
"2.2 TranscribeC",
"2.3 TranscribeV",
"2.4 TranscribeTone",
"2.5 TranscribeKnown",
"3.1 ReadVocalTract",
"3.2 GesturalScore",
"4.1 SegmentSpectro",
"4.2 ReadSpectro",
"4.3 IdentifyDisplay",
"4.4 ReadFrequency",
"4.5 HarmonicsFormants",
"5 Apply"),
`#Time to mastery` = c("15","10","25","10","5","5","30","5","5","7","7","2","2",
"2","5"))
)
#output$value <- renderPrint({ input$text })
}
# Second tab: check own performance ####
# Sidebar panel for inputs
sidebar_content <- sidebarPanel(
textInput(inputId = "id", label = h3("Student key"), value = "Enter your key..."),
# Input: dropdown for the kinds of skills
selectInput(inputId = "skills", # to match server output color
label = "Select a skill",
# Create the choices that can be selected. e.g. Display "A" and link to value "a"
choices = c("1.1 DefineSymbol"="1.1.",
"1.2 GiveSymbol"="1.2.",
"2.1 TranscribeMulti"="2.1.",
"2.2 TranscribeC"="2.2.",
"2.3 TranscribeV"="2.3.",
"2.4 TranscribeTone"="2.4.",
"2.5 TranscribeKnown"="2.5.",
"3.1 ReadVocalTract"="3.1.",
"3.2 GesturalScore"="3.2.",
"4.1 SegmentSpectro"="4.1.",
"4.2 ReadSpectro"="4.2.",
"4.3 IdentifyDisplay"="4.3.",
"4.4 ReadFrequency"="4.4.",
"4.5 HarmonicsFormants"="4.5.",
"5 Apply"="5."),
selected = "NA", # from the set of choice values
)
# hr(),
# fluidRow(column(3, verbatimTextOutput("value")))
)
#### always last
shinyApp(ui = ui, server = server)
# modify according to the colnames that R read in
# use
colnames(data)
